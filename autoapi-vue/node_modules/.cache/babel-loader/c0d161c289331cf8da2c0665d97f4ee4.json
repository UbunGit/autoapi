{"remainingRequest":"/Users/admin/Documents/GitHub/autoapi/node_modules/babel-loader/lib/index.js!/Users/admin/Documents/GitHub/autoapi/node_modules/eslint-loader/index.js??ref--13-0!/Users/admin/Documents/GitHub/autoapi/src/autoapi-database/lib/database-manager.js","dependencies":[{"path":"/Users/admin/Documents/GitHub/autoapi/src/autoapi-database/lib/database-manager.js","mtime":1605243972298},{"path":"/Users/admin/Documents/GitHub/autoapi/node_modules/cache-loader/dist/cjs.js","mtime":1603071031830},{"path":"/Users/admin/Documents/GitHub/autoapi/node_modules/babel-loader/lib/index.js","mtime":1605088291697},{"path":"/Users/admin/Documents/GitHub/autoapi/node_modules/eslint-loader/index.js","mtime":1603071032704}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:J3VzZSBzdHJpY3QnOyAvLyBjb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7Ci8vIGNvbnN0IHsgY3JlYXRlUXVlcnkgfSA9IHJlcXVpcmUoJy4vcXVlcmllcycpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm1hcCIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yIik7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrID0gcmVxdWlyZSgiL1VzZXJzL2FkbWluL0RvY3VtZW50cy9HaXRIdWIvYXV0b2FwaS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpOwoKdmFyIGNyZWF0ZUNvbm5lY3RvclJlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9jb25uZWN0b3ItcmVnaXN0cnknKTsgLy8gY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTsKLy8gY29uc3QgeyB2YWxpZGF0ZU1vZGVsU2NoZW1hcyB9ID0gcmVxdWlyZSgnLi92YWxpZGF0aW9uJyk7CgoKdmFyIERhdGFiYXNlTWFuYWdlciA9IGZ1bmN0aW9uIERhdGFiYXNlTWFuYWdlcihhdXRvYXBpKSB7CiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERhdGFiYXNlTWFuYWdlcik7CgogIHRoaXMuYXV0b2FwaSA9IGF1dG9hcGk7CiAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlOwogIHRoaXMuY29ubmVjdG9ycyA9IGNyZWF0ZUNvbm5lY3RvclJlZ2lzdHJ5KHsKICAgIGNvbm5lY3Rpb25zOiBhdXRvYXBpLmNvbmZpZy5nZXQoJ2RhdGFiYXNlLmNvbm5lY3Rpb25zJykgLy8gICBkZWZhdWx0Q29ubmVjdGlvbjogYXV0b2FwaS5jb25maWcuZ2V0KCdkYXRhYmFzZS5kZWZhdWx0Q29ubmVjdGlvbicpLAoKICB9KTsKICB0aGlzLnF1ZXJpZXMgPSBuZXcgTWFwKCk7CiAgdGhpcy5tb2RlbHMgPSBuZXcgTWFwKCk7Cn0gLy8gICBhc3luYyBpbml0aWFsaXplKCkgewovLyAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQgPT09IHRydWUpIHsKLy8gICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhYmFzZSBtYW5hZ2VyIGFscmVhZHkgaW5pdGlhbGl6ZWQnKTsKLy8gICAgIH0KLy8gICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlOwovLyAgICAgdGhpcy5jb25uZWN0b3JzLmxvYWQoKTsKLy8gICAgIHZhbGlkYXRlTW9kZWxTY2hlbWFzKHsgYXV0b2FwaTogdGhpcy5hdXRvYXBpLCBtYW5hZ2VyOiB0aGlzIH0pOwovLyAgICAgYXdhaXQgdGhpcy5jb25uZWN0b3JzLmluaXRpYWxpemUoKTsKLy8gICAgIHRoaXMuaW5pdGlhbGl6ZU1vZGVsc01hcCgpOwovLyAgICAgcmV0dXJuIHRoaXM7Ci8vICAgfQovLyAgIGluaXRpYWxpemVNb2RlbHNNYXAoKSB7Ci8vICAgICBPYmplY3Qua2V5cyh0aGlzLmF1dG9hcGkubW9kZWxzKS5mb3JFYWNoKG1vZGVsS2V5ID0+IHsKLy8gICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLmF1dG9hcGkubW9kZWxzW21vZGVsS2V5XTsKLy8gICAgICAgdGhpcy5tb2RlbHMuc2V0KG1vZGVsLnVpZCwgbW9kZWwpOwovLyAgICAgfSk7Ci8vICAgICBPYmplY3Qua2V5cyh0aGlzLmF1dG9hcGkuYWRtaW4ubW9kZWxzKS5mb3JFYWNoKG1vZGVsS2V5ID0+IHsKLy8gICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLmF1dG9hcGkuYWRtaW4ubW9kZWxzW21vZGVsS2V5XTsKLy8gICAgICAgdGhpcy5tb2RlbHMuc2V0KG1vZGVsLnVpZCwgbW9kZWwpOwovLyAgICAgfSk7Ci8vICAgICBPYmplY3Qua2V5cyh0aGlzLmF1dG9hcGkucGx1Z2lucykuZm9yRWFjaChwbHVnaW5LZXkgPT4gewovLyAgICAgICBPYmplY3Qua2V5cyh0aGlzLmF1dG9hcGkucGx1Z2luc1twbHVnaW5LZXldLm1vZGVscykuZm9yRWFjaChtb2RlbEtleSA9PiB7Ci8vICAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLmF1dG9hcGkucGx1Z2luc1twbHVnaW5LZXldLm1vZGVsc1ttb2RlbEtleV07Ci8vICAgICAgICAgdGhpcy5tb2RlbHMuc2V0KG1vZGVsLnVpZCwgbW9kZWwpOwovLyAgICAgICB9KTsKLy8gICAgIH0pOwovLyAgIH0KLy8gICBxdWVyeShlbnRpdHksIHBsdWdpbikgewovLyAgICAgaWYgKCFlbnRpdHkpIHsKLy8gICAgICAgdGhyb3cgbmV3IEVycm9yKGBhcmd1bWVudCBlbnRpdHkgaXMgcmVxdWlyZWRgKTsKLy8gICAgIH0KLy8gICAgIGNvbnN0IG5vcm1hbGl6ZWROYW1lID0gZW50aXR5LnRvTG93ZXJDYXNlKCk7Ci8vICAgICAvLyBnZXQgYnkgdWlkIG9yIG5hbWUgLyBwbHVnaW4KLy8gICAgIGNvbnN0IG1vZGVsID0gdGhpcy5tb2RlbHMuaGFzKGVudGl0eSkKLy8gICAgICAgPyB0aGlzLm1vZGVscy5nZXQoZW50aXR5KQovLyAgICAgICA6IHRoaXMuZ2V0TW9kZWwobm9ybWFsaXplZE5hbWUsIHBsdWdpbik7Ci8vICAgICBpZiAoIW1vZGVsKSB7Ci8vICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIG1vZGVsICR7ZW50aXR5fSBjYW4ndCBiZSBmb3VuZC5gKTsKLy8gICAgIH0KLy8gICAgIGlmICh0aGlzLnF1ZXJpZXMuaGFzKG1vZGVsLnVpZCkpIHsKLy8gICAgICAgcmV0dXJuIHRoaXMucXVlcmllcy5nZXQobW9kZWwudWlkKTsKLy8gICAgIH0KLy8gICAgIGNvbnN0IGNvbm5lY3RvclF1ZXJ5ID0gdGhpcy5jb25uZWN0b3JzCi8vICAgICAgIC5nZXQobW9kZWwub3JtKQovLyAgICAgICAucXVlcmllcyh7IG1vZGVsLCBtb2RlbEtleTogbW9kZWwubW9kZWxOYW1lLCBhdXRvYXBpIH0pOwovLyAgICAgY29uc3QgcXVlcnkgPSBjcmVhdGVRdWVyeSh7Ci8vICAgICAgIGNvbm5lY3RvclF1ZXJ5LAovLyAgICAgICBtb2RlbCwKLy8gICAgIH0pOwovLyAgICAgdGhpcy5xdWVyaWVzLnNldChtb2RlbC51aWQsIHF1ZXJ5KTsKLy8gICAgIHJldHVybiBxdWVyeTsKLy8gICB9Ci8vICAgZ2V0TW9kZWwobmFtZSwgcGx1Z2luKSB7Ci8vICAgICBjb25zdCBrZXkgPSBfLnRvTG93ZXIobmFtZSk7Ci8vICAgICBpZiAodGhpcy5tb2RlbHMuaGFzKGtleSkpIHJldHVybiB0aGlzLm1vZGVscy5nZXQoa2V5KTsKLy8gICAgIGlmIChwbHVnaW4gPT09ICdhZG1pbicpIHsKLy8gICAgICAgcmV0dXJuIF8uZ2V0KGF1dG9hcGkuYWRtaW4sIFsnbW9kZWxzJywga2V5XSk7Ci8vICAgICB9Ci8vICAgICBpZiAocGx1Z2luKSB7Ci8vICAgICAgIHJldHVybiBfLmdldChhdXRvYXBpLnBsdWdpbnMsIFtwbHVnaW4sICdtb2RlbHMnLCBrZXldKTsKLy8gICAgIH0KLy8gICAgIHJldHVybiBfLmdldChhdXRvYXBpLCBbJ21vZGVscycsIGtleV0pIHx8IF8uZ2V0KGF1dG9hcGksIFsnY29tcG9uZW50cycsIGtleV0pOwovLyAgIH0KLy8gICBnZXRNb2RlbEJ5QXNzb2MoYXNzb2MpIHsKLy8gICAgIHJldHVybiB0aGlzLmdldE1vZGVsKGFzc29jLmNvbGxlY3Rpb24gfHwgYXNzb2MubW9kZWwsIGFzc29jLnBsdWdpbik7Ci8vICAgfQovLyAgIGdldE1vZGVsQnlDb2xsZWN0aW9uTmFtZShjb2xsZWN0aW9uTmFtZSkgewovLyAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5tb2RlbHMudmFsdWVzKCkpLmZpbmQobW9kZWwgPT4gewovLyAgICAgICByZXR1cm4gbW9kZWwuY29sbGVjdGlvbk5hbWUgPT09IGNvbGxlY3Rpb25OYW1lOwovLyAgICAgfSk7Ci8vICAgfQovLyAgIGdldE1vZGVsQnlHbG9iYWxJZChnbG9iYWxJZCkgewovLyAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5tb2RlbHMudmFsdWVzKCkpLmZpbmQobW9kZWwgPT4gewovLyAgICAgICByZXR1cm4gbW9kZWwuZ2xvYmFsSWQgPT09IGdsb2JhbElkOwovLyAgICAgfSk7Ci8vICAgfQovLyAgIGdldE1vZGVsc0J5QXR0cmlidXRlKGF0dHIpIHsKLy8gICAgIGlmIChhdHRyLnR5cGUgPT09ICdjb21wb25lbnQnKSB7Ci8vICAgICAgIHJldHVybiBbdGhpcy5nZXRNb2RlbChhdHRyLmNvbXBvbmVudCldOwovLyAgICAgfQovLyAgICAgaWYgKGF0dHIudHlwZSA9PT0gJ2R5bmFtaWN6b25lJykgewovLyAgICAgICByZXR1cm4gYXR0ci5jb21wb25lbnRzLm1hcChjb21wb05hbWUgPT4gdGhpcy5nZXRNb2RlbChjb21wb05hbWUpKTsKLy8gICAgIH0KLy8gICAgIGlmIChhdHRyLm1vZGVsIHx8IGF0dHIuY29sbGVjdGlvbikgewovLyAgICAgICByZXR1cm4gW3RoaXMuZ2V0TW9kZWxCeUFzc29jKGF0dHIpXTsKLy8gICAgIH0KLy8gICAgIHJldHVybiBbXTsKLy8gICB9Ci8vICAgZ2V0TW9kZWxzQnlQbHVnaW5OYW1lKHBsdWdpbk5hbWUpIHsKLy8gICAgIGlmICghcGx1Z2luTmFtZSkgewovLyAgICAgICByZXR1cm4gYXV0b2FwaS5tb2RlbHM7Ci8vICAgICB9Ci8vICAgICByZXR1cm4gcGx1Z2luTmFtZSA9PT0gJ2FkbWluJyA/IGF1dG9hcGkuYWRtaW4ubW9kZWxzIDogYXV0b2FwaS5wbHVnaW5zW3BsdWdpbk5hbWVdLm1vZGVsczsKLy8gICB9Ci8vICAgZ2V0UmVzZXJ2ZWROYW1lcygpIHsKLy8gICAgIHJldHVybiB7Ci8vICAgICAgIG1vZGVsczogY29uc3RhbnRzLlJFU0VSVkVEX01PREVMX05BTUVTLAovLyAgICAgICBhdHRyaWJ1dGVzOiBbCi8vICAgICAgICAgLi4uY29uc3RhbnRzLlJFU0VSVkVEX0FUVFJJQlVURV9OQU1FUywKLy8gICAgICAgICAuLi4oYXV0b2FwaS5kYi5jb25uZWN0b3JzLmRlZmF1bHQuZGVmYXVsdFRpbWVzdGFtcHMgfHwgW10pLAovLyAgICAgICBdLAovLyAgICAgfTsKLy8gICB9CjsKCmZ1bmN0aW9uIGNyZWF0ZURhdGFiYXNlTWFuYWdlcihhdXRvYXBpKSB7CiAgcmV0dXJuIG5ldyBEYXRhYmFzZU1hbmFnZXIoYXV0b2FwaSk7Cn0KCm1vZHVsZS5leHBvcnRzID0gewogIGNyZWF0ZURhdGFiYXNlTWFuYWdlcjogY3JlYXRlRGF0YWJhc2VNYW5hZ2VyCn07"},{"version":3,"sources":["/Users/admin/Documents/GitHub/autoapi/src/autoapi-database/lib/database-manager.js"],"names":["createConnectorRegistry","require","DatabaseManager","autoapi","initialized","connectors","connections","config","get","queries","Map","models","createDatabaseManager","module","exports"],"mappings":"AAAA,a,CAEA;AAEA;;;;;;;;;;;;AACA,IAAMA,uBAAuB,GAAGC,OAAO,CAAC,sBAAD,CAAvC,C,CACA;AACA;;;IAEMC,e,GACJ,yBAAYC,OAAZ,EAAqB;AAAA;;AACnB,OAAKA,OAAL,GAAeA,OAAf;AAEA,OAAKC,WAAL,GAAmB,KAAnB;AAEA,OAAKC,UAAL,GAAkBL,uBAAuB,CAAC;AACxCM,IAAAA,WAAW,EAAEH,OAAO,CAACI,MAAR,CAAeC,GAAf,CAAmB,sBAAnB,CAD2B,CAE1C;;AAF0C,GAAD,CAAzC;AAKA,OAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACA,OAAKC,MAAL,GAAc,IAAID,GAAJ,EAAdqBAAT,CAA+BT,OAA/B,EAAwC;AACtC,SAAO,IAAID,eAAJ,CAAoBC,OAApB,CAAP;AACD;;AAEDU,MAAM,CAACC,OAAP,GAAiB;AACfF,EAAAA,qBAAqB,EAArBA;AADe,CAAjB","sourcesContent":["'use strict';\n\n// const _ = require('lodash');\n\n// const { createQuery } = require('./queries');\nconst createConnectorRegistry = require('./connector-registry');\n// const constants = require('./constants');\n// const { validateModelSchemas } = require('./validation');\n\nclass DatabaseManager {\n  constructor(autoapi) {\n    this.autoapi = autoapi;\n\n    this.initialized = false;\n\n    this.connectors = createConnectorRegistry({\n      connections: autoapi.config.get('database.connections'),\n    //   defaultConnection: autoapi.config.get('database.defaultConnection'),\n    });\n\n    this.queries = new Map();\n    this.models = new Map();\n  }\n\n//   async initialize() {\n//     if (this.initialized === true) {\n//       throw new Error('Database manager already initialized');\n//     }\n\n//     this.initialized = true;\n\n//     this.connectors.load();\n\n//     validateModelSchemas({ autoapi: this.autoapi, manager: this });\n\n//     await this.connectors.initialize();\n\n//     this.initializeModelsMap();\n\n//     return this;\n//   }\n\n//   initializeModelsMap() {\n//     Object.keys(this.autoapi.models).forEach(modelKey => {\n//       const model = this.autoapi.models[modelKey];\n//       this.models.set(model.uid, model);\n//     });\n\n//     Object.keys(this.autoapi.admin.models).forEach(modelKey => {\n//       const model = this.autoapi.admin.models[modelKey];\n//       this.models.set(model.uid, model);\n//     });\n\n//     Object.keys(this.autoapi.plugins).forEach(pluginKey => {\n//       Object.keys(this.autoapi.plugins[pluginKey].models).forEach(modelKey => {\n//         const model = this.autoapi.plugins[pluginKey].models[modelKey];\n//         this.models.set(model.uid, model);\n//       });\n//     });\n//   }\n\n//   query(entity, plugin) {\n//     if (!entity) {\n//       throw new Error(`argument entity is required`);\n//     }\n\n//     const normalizedName = entity.toLowerCase();\n\n//     // get by uid or name / plugin\n//     const model = this.models.has(entity)\n//       ? this.models.get(entity)\n//       : this.getModel(normalizedName, plugin);\n\n//     if (!model) {\n//       throw new Error(`The model ${entity} can't be found.`);\n//     }\n\n//     if (this.queries.has(model.uid)) {\n//       return this.queries.get(model.uid);\n//     }\n\n//     const connectorQuery = this.connectors\n//       .get(model.orm)\n//       .queries({ model, modelKey: model.modelName, autoapi });\n\n//     const query = createQuery({\n//       connectorQuery,\n//       model,\n//     });\n\n//     this.queries.set(model.uid, query);\n//     return query;\n//   }\n\n//   getModel(name, plugin) {\n//     const key = _.toLower(name);\n\n//     if (this.models.has(key)) return this.models.get(key);\n\n//     if (plugin === 'admin') {\n//       return _.get(autoapi.admin, ['models', key]);\n//     }\n\n//     if (plugin) {\n//       return _.get(autoapi.plugins, [plugin, 'models', key]);\n//     }\n\n//     return _.get(autoapi, ['models', key]) || _.get(autoapi, ['components', key]);\n//   }\n\n//   getModelByAssoc(assoc) {\n//     return this.getModel(assoc.collection || assoc.model, assoc.plugin);\n//   }\n\n//   getModelByCollectionName(collectionName) {\n//     return Array.from(this.models.values()).find(model => {\n//       return model.collectionName === collectionName;\n//     });\n//   }\n\n//   getModelByGlobalId(globalId) {\n//     return Array.from(this.models.values()).find(model => {\n//       return model.globalId === globalId;\n//     });\n//   }\n\n//   getModelsByAttribute(attr) {\n//     if (attr.type === 'component') {\n//       return [this.getModel(attr.component)];\n//     }\n//     if (attr.type === 'dynamiczone') {\n//       return attr.components.map(compoName => this.getModel(compoName));\n//     }\n//     if (attr.model || attr.collection) {\n//       return [this.getModelByAssoc(attr)];\n//     }\n\n//     return [];\n//   }\n\n//   getModelsByPluginName(pluginName) {\n//     if (!pluginName) {\n//       return autoapi.models;\n//     }\n\n//     return pluginName === 'admin' ? autoapi.admin.models : autoapi.plugins[pluginName].models;\n//   }\n\n//   getReservedNames() {\n//     return {\n//       models: constants.RESERVED_MODEL_NAMES,\n//       attributes: [\n//         ...constants.RESERVED_ATTRIBUTE_NAMES,\n//         ...(autoapi.db.connectors.default.defaultTimestamps || []),\n//       ],\n//     };\n//   }\n}\n\nfunction createDatabaseManager(autoapi) {\n  return new DatabaseManager(autoapi);\n}\n\nmodule.exports = {\n  createDatabaseManager,\n};"]}]}