{"remainingRequest":"/Users/admin/Documents/GitHub/autoapi/node_modules/babel-loader/lib/index.js!/Users/admin/Documents/GitHub/autoapi/node_modules/eslint-loader/index.js??ref--13-0!/Users/admin/Documents/GitHub/autoapi/src/autoapi-database/lib/connector-registry.js","dependencies":[{"path":"/Users/admin/Documents/GitHub/autoapi/src/autoapi-database/lib/connector-registry.js","mtime":1605238047599},{"path":"/Users/admin/Documents/GitHub/autoapi/node_modules/cache-loader/dist/cjs.js","mtime":1603071031830},{"path":"/Users/admin/Documents/GitHub/autoapi/node_modules/babel-loader/lib/index.js","mtime":1605088291697},{"path":"/Users/admin/Documents/GitHub/autoapi/node_modules/eslint-loader/index.js","mtime":1603071032704}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:J3VzZSBzdHJpY3QnOwovKioKICogRGF0YWJhc2UgY29ubmVjdG9yIHJlZ2lzdHJ5CiAqLwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm1hcCIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvciIpOwoKdmFyIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyID0gcmVxdWlyZSgiL1VzZXJzL2FkbWluL0RvY3VtZW50cy9HaXRIdWIvYXV0b2FwaS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIik7CgpyZXF1aXJlKCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiKTsKCnZhciBfYXN5bmNUb0dlbmVyYXRvciA9IHJlcXVpcmUoIi9Vc2Vycy9hZG1pbi9Eb2N1bWVudHMvR2l0SHViL2F1dG9hcGkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvciIpOwoKdmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTsKCnZhciByZXF1aXJlQ29ubmVjdG9yID0gcmVxdWlyZSgnLi9yZXF1aXJlLWNvbm5lY3RvcicpOwoKdmFyIGNyZWF0ZUNvbm5lY3RvclJlZ2lzdHJ5ID0gZnVuY3Rpb24gY3JlYXRlQ29ubmVjdG9yUmVnaXN0cnkoX3JlZikgewogIHZhciBkZWZhdWx0Q29ubmVjdGlvbiA9IF9yZWYuZGVmYXVsdENvbm5lY3Rpb24sCiAgICAgIGNvbm5lY3Rpb25zID0gX3JlZi5jb25uZWN0aW9uczsKCiAgdmFyIF9jb25uZWN0b3JzID0gbmV3IE1hcCgpOwoKICByZXR1cm4gewogICAgLyoqCiAgICAgKiBMb2FkIGNvbm5lY3RvciBtb2R1bGVzCiAgICAgKi8KICAgIGxvYWQ6IGZ1bmN0aW9uIGxvYWQoKSB7CiAgICAgIGZvciAodmFyIF9pID0gMCwgX09iamVjdCR2YWx1ZXMgPSBPYmplY3QudmFsdWVzKGNvbm5lY3Rpb25zKTsgX2kgPCBfT2JqZWN0JHZhbHVlcy5sZW5ndGg7IF9pKyspIHsKICAgICAgICB2YXIgY29ubmVjdGlvbiA9IF9PYmplY3QkdmFsdWVzW19pXTsKICAgICAgICB2YXIgY29ubmVjdG9yID0gY29ubmVjdGlvbi5jb25uZWN0b3I7CgogICAgICAgIGlmICghX2Nvbm5lY3RvcnMuaGFzKGNvbm5lY3RvcikpIHsKICAgICAgICAgIF9jb25uZWN0b3JzLnNldChjb25uZWN0b3IsIHJlcXVpcmVDb25uZWN0b3IoY29ubmVjdG9yKShzdHJhcGkpKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBJbml0aWFsaXplIGNvbm5lY3RvcnMKICAgICAqLwogICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgX2l0ZXJhdG9yLCBfc3RlcCwgY29ubmVjdG9yOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihfY29ubmVjdG9ycy52YWx1ZXMoKSk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTsKCiAgICAgICAgICAgICAgICBfaXRlcmF0b3IucygpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBpZiAoKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29ubmVjdG9yID0gX3N0ZXAudmFsdWU7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiBjb25uZWN0b3IuaW5pdGlhbGl6ZSgpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTQ7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMSk7CgogICAgICAgICAgICAgICAgX2l0ZXJhdG9yLmUoX2NvbnRleHQudDApOwoKICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE0OwoKICAgICAgICAgICAgICAgIF9pdGVyYXRvci5mKCk7CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCgxNCk7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzEsIDExLCAxNCwgMTddXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGdldDogZnVuY3Rpb24gZ2V0KGtleSkgewogICAgICByZXR1cm4gX2Nvbm5lY3RvcnMuZ2V0KGtleSk7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWwpIHsKICAgICAgX2Nvbm5lY3RvcnMuc2V0KGtleSwgdmFsKTsKCiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICBnZXQgZGVmYXVsdCgpIHsKICAgICAgdmFyIGRlZmF1bHRDb25uZWN0b3IgPSBjb25uZWN0aW9uc1tkZWZhdWx0Q29ubmVjdGlvbl0uY29ubmVjdG9yOwogICAgICByZXR1cm4gX2Nvbm5lY3RvcnMuZ2V0KGRlZmF1bHRDb25uZWN0b3IpOwogICAgfSwKCiAgICBnZXRCeUNvbm5lY3Rpb246IGZ1bmN0aW9uIGdldEJ5Q29ubmVjdGlvbihjb25uZWN0aW9uKSB7CiAgICAgIGlmICghXy5oYXMoY29ubmVjdGlvbnMsIGNvbm5lY3Rpb24pKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGEgY29ubmVjdG9yIGZvciBhbiB1bmtub3cgY29ubmVjdGlvbicpOwogICAgICB9CgogICAgICB2YXIgY29ubmVjdG9yS2V5ID0gY29ubmVjdGlvbnNbY29ubmVjdGlvbl0uY29ubmVjdG9yOwogICAgICByZXR1cm4gX2Nvbm5lY3RvcnMuZ2V0KGNvbm5lY3RvcktleSk7CiAgICB9CiAgfTsKfTsKCm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQ29ubmVjdG9yUmVnaXN0cnk7"},{"version":3,"sources":["/Users/admin/Documents/GitHub/autoapi/src/autoapi-database/lib/connector-registry.js"],"names":["_","require","requireConnector","createConnectorRegistry","defaultConnection","connections","_connectors","Map","load","Object","values","connection","connector","has","set","strapi","initialize","get","key","val","default","defaultConnector","getByConnection","Error","connectorKey","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAMC,gBAAgB,GAAGD,OAAO,CAAC,qBAAD,CAAhC;;AAEA,IAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,OAAwC;AAAA,MAArCC,iBAAqC,QAArCA,iBAAqC;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;;AACtE,MAAMC,WAAW,GAAG,IAAIC,GAAJ,EAApB;;AAEA,SAAO;AACL;AACJ;AACA;AACIC,IAAAA,IAJK,kBAIE;AACL,wCAAyBC,MAAM,CAACC,MAAP,CAAcL,WAAd,CAAzB,oCAAqD;AAAhD,YAAMM,UAAU,qBAAhB;AAAgD,YAC3CC,SAD2C,GAC7BD,UAD6B,CAC3CC,SAD2C;;AAEnD,YAAI,CAACN,WAAW,CAACO,GAAZ,CAAgBD,SAAhB,CAAL,EAAiC;AAC/BN,UAAAA,WAAW,CAACQ,GAAZ,CAAgBF,SAAhB,EAA2BV,gBAAgB,CAACU,SAAD,CAAhB,CAA4BG,MAA5B,CAA3B;AACD;AACF;AACF,KAXI;;AAaL;AACJ;AACA;AACUC,IAAAA,UAhBD,wBAgBc;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uDACOV,WAAW,CAACI,MAAZ,EADP;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACNE,gBAAAA,SADM;AAAA;AAAA,uBAETA,SAAS,CAACI,UAAV,EAFS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIlB,KApBI;AAsBLC,IAAAA,GAtBK,eAsBDC,GAtBC,EAsBI;AACP,aAAOZ,WAAW,CAACW,GAAZ,CAAgBC,GAAhB,CAAP;AACD,KAxBI;AA0BLJ,IAAAA,GA1BK,eA0BDI,GA1BC,EA0BIC,GA1BJ,EA0BS;AACZb,MAAAA,WAAW,CAACQ,GAAZ,CAAgBI,GAAhB,EAAqBC,GAArB;;AACA,aAAO,IAAP;AACD,KA7BI;;AA+BL,QAAIC,OAAJ,GAAc;AACZ,UAAMC,gBAAgB,GAAGhB,WAAW,CAACD,iBAAD,CAAX,CAA+BQ,SAAxD;AACA,aAAON,WAAW,CAACW,GAAZ,CAAgBI,gBAAhB,CAAP;AACD,KAlCI;;AAoCLC,IAAAA,eApCK,2BAoCWX,UApCX,EAoCuB;AAC1B,UAAI,CAACX,CAAC,CAACa,GAAF,CAAMR,WAAN,EAAmBM,UAAnB,CAAL,EAAqC;AACnC,cAAM,IAAIY,KAAJ,CAAU,uDAAV,CAAN;AACD;;AAED,UAAMC,YAAY,GAAGnB,WAAW,CAACM,UAAD,CAAX,CAAwBC,SAA7C;AACA,aAAON,WAAW,CAACW,GAAZ,CAAgBO,YAAhB,CAAP;AACD;AA3CI,GAAP;AA6CD,CAhDD;;AAkDAC,MAAM,CAACC,OAAP,GAAiBvB,uBAAjB","sourcesContent":["'use strict';\n/**\n * Database connector registry\n */\n\nconst _ = require('lodash');\nconst requireConnector = require('./require-connector');\n\nconst createConnectorRegistry = ({ defaultConnection, connections }) => {\n  const _connectors = new Map();\n\n  return {\n    /**\n     * Load connector modules\n     */\n    load() {\n      for (const connection of Object.values(connections)) {\n        const { connector } = connection;\n        if (!_connectors.has(connector)) {\n          _connectors.set(connector, requireConnector(connector)(strapi));\n        }\n      }\n    },\n\n    /**\n     * Initialize connectors\n     */\n    async initialize() {\n      for (const connector of _connectors.values()) {\n        await connector.initialize();\n      }\n    },\n\n    get(key) {\n      return _connectors.get(key);\n    },\n\n    set(key, val) {\n      _connectors.set(key, val);\n      return this;\n    },\n\n    get default() {\n      const defaultConnector = connections[defaultConnection].connector;\n      return _connectors.get(defaultConnector);\n    },\n\n    getByConnection(connection) {\n      if (!_.has(connections, connection)) {\n        throw new Error('Trying to access a connector for an unknow connection');\n      }\n\n      const connectorKey = connections[connection].connector;\n      return _connectors.get(connectorKey);\n    },\n  };\n};\n\nmodule.exports = createConnectorRegistry;"]}]}