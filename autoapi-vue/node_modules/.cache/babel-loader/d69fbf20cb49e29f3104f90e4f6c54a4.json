{"remainingRequest":"/Users/admin/Documents/GitHub/autoapi/node_modules/babel-loader/lib/index.js!/Users/admin/Documents/GitHub/autoapi/node_modules/eslint-loader/index.js??ref--13-0!/Users/admin/Documents/GitHub/autoapi/src/autoapi/lib/core/load-policies.js","dependencies":[{"path":"/Users/admin/Documents/GitHub/autoapi/src/autoapi/lib/core/load-policies.js","mtime":1604391444000},{"path":"/Users/admin/Documents/GitHub/autoapi/node_modules/cache-loader/dist/cjs.js","mtime":1603071031830},{"path":"/Users/admin/Documents/GitHub/autoapi/node_modules/babel-loader/lib/index.js","mtime":1605088291697},{"path":"/Users/admin/Documents/GitHub/autoapi/node_modules/eslint-loader/index.js","mtime":1603071032704}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:J3VzZSBzdHJpY3QnOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdCIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlciIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUiKTsKCnZhciBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciA9IHJlcXVpcmUoIi9Vc2Vycy9hZG1pbi9Eb2N1bWVudHMvR2l0SHViL2F1dG9hcGkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIpOwoKdmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpOwoKdmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTsKCnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpOwoKdmFyIGZzZSA9IHJlcXVpcmUoJ2ZzLWV4dHJhJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkaXIpIHsKICBpZiAoIWZzZS5leGlzdHNTeW5jKGRpcikpIHJldHVybiB7fTsKICB2YXIgcm9vdCA9IHt9OwogIHZhciBwYXRocyA9IGZzZS5yZWFkZGlyU3luYyhkaXIsIHsKICAgIHdpdGhGaWxlVHlwZXM6IHRydWUKICB9KS5maWx0ZXIoZnVuY3Rpb24gKGZkKSB7CiAgICByZXR1cm4gZmQuaXNGaWxlKCk7CiAgfSk7CgogIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihwYXRocyksCiAgICAgIF9zdGVwOwoKICB0cnkgewogICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgdmFyIGZkID0gX3N0ZXAudmFsdWU7CiAgICAgIHZhciBuYW1lID0gZmQubmFtZTsKICAgICAgdmFyIGZ1bGxQYXRoID0gZGlyICsgcGF0aC5zZXAgKyBuYW1lOwogICAgICB2YXIgZXh0ID0gcGF0aC5leHRuYW1lKG5hbWUpOwogICAgICB2YXIga2V5ID0gcGF0aC5iYXNlbmFtZShuYW1lLCBleHQpOwogICAgICByb290W18udG9Mb3dlcihrZXkpXSA9IGxvYWRQb2xpY3koZnVsbFBhdGgpOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2l0ZXJhdG9yLmUoZXJyKTsKICB9IGZpbmFsbHkgewogICAgX2l0ZXJhdG9yLmYoKTsKICB9CgogIHJldHVybiByb290Owp9OwoKdmFyIGxvYWRQb2xpY3kgPSBmdW5jdGlvbiBsb2FkUG9saWN5KGZpbGUpIHsKICB0cnkgewogICAgdmFyIHBvbGljeSA9IHJlcXVpcmUoZmlsZSk7CgogICAgYXNzZXJ0KHR5cGVvZiBwb2xpY3kgPT09ICdmdW5jdGlvbicsICdQb2xpY3kgbXVzdCBiZSBhIGZ1bmN0aW9uLicpOwogICAgcmV0dXJuIHBvbGljeTsKICB9IGNhdGNoIChlcnJvcikgewogICAgdGhyb3cgIkNvdWxkIG5vdCBsb2FkIHBvbGljeSAiLmNvbmNhdChmaWxlLCAiOiAiKS5jb25jYXQoZXJyb3IubWVzc2FnZSk7CiAgfQp9Ow=="},{"version":3,"sources":["/Users/admin/Documents/GitHub/autoapi/src/autoapi/lib/core/load-policies.js"],"names":["assert","require","_","path","fse","module","exports","dir","existsSync","root","paths","readdirSync","withFileTypes","filter","fd","isFile","name","fullPath","sep","ext","extname","key","basename","toLower","loadPolicy","file","policy","error","message"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMG,GAAG,GAAGH,OAAO,CAAC,UAAD,CAAnB;;AAEAI,MAAM,CAACC,OAAP,GAAiB,UAAAC,GAAG,EAAI;AACtB,MAAI,CAACH,GAAG,CAACI,UAAJ,CAAeD,GAAf,CAAL,EAA0B,OAAO,EAAP;AAE1B,MAAME,IAAI,GAAG,EAAb;AACA,MAAMC,KAAK,GAAGN,GAAG,CAACO,WAAJ,CAAgBJ,GAAhB,EAAqB;AAAEK,IAAAA,aAAa,EAAE;AAAjB,GAArB,EAA8CC,MAA9C,CAAqD,UAAAC,EAAE;AAAA,WAAIA,EAAE,CAACC,MAAH,EAAJ;AAAA,GAAvD,CAAd;;AAJsB,6CAMPL,KANO;AAAA;;AAAA;AAMtB,wDAAsB;AAAA,UAAbI,EAAa;AAAA,UACZE,IADY,GACHF,EADG,CACZE,IADY;AAEpB,UAAMC,QAAQ,GAAGV,GAAG,GAAGJ,IAAI,CAACe,GAAX,GAAiBF,IAAlC;AAEA,UAAMG,GAAG,GAAGhB,IAAI,CAACiB,OAAL,CAAaJ,IAAb,CAAZ;AACA,UAAMK,GAAG,GAAGlB,IAAI,CAACmB,QAAL,CAAcN,IAAd,EAAoBG,GAApB,CAAZ;AACAV,MAAAA,IAAI,CAACP,CAAC,CAACqB,OAAF,CAAUF,GAAV,CAAD,CAAJ,GAAuBG,UAAU,CAACP,QAAD,CAAjC;AACD;AAbqB;AAAA;AAAA;AAAA;AAAA;;AAetB,SAAOR,IAAP;AACD,CAhBD;;AAkBA,IAAMe,UAAU,GAAG,SAAbA,UAAa,CAAAC,IAAI,EAAI;AACzB,MAAI;AACF,QAAMC,MAAM,GAAGzB,OAAO,CAACwB,IAAD,CAAtB;;AAEAzB,IAAAA,MAAM,CAAC,OAAO0B,MAAP,KAAkB,UAAnB,EAA+B,4BAA/B,CAAN;AAEA,WAAOA,MAAP;AACD,GAND,CAME,OAAOC,KAAP,EAAc;AACd,0CAA+BF,IAA/B,eAAwCE,KAAK,CAACC,OAA9C;AACD;AACF,CAVD","sourcesContent":["'use strict';\n\nconst assert = require('assert');\nconst _ = require('lodash');\nconst path = require('path');\nconst fse = require('fs-extra');\n\nmodule.exports = dir => {\n  if (!fse.existsSync(dir)) return {};\n\n  const root = {};\n  const paths = fse.readdirSync(dir, { withFileTypes: true }).filter(fd => fd.isFile());\n\n  for (let fd of paths) {\n    const { name } = fd;\n    const fullPath = dir + path.sep + name;\n\n    const ext = path.extname(name);\n    const key = path.basename(name, ext);\n    root[_.toLower(key)] = loadPolicy(fullPath);\n  }\n\n  return root;\n};\n\nconst loadPolicy = file => {\n  try {\n    const policy = require(file);\n\n    assert(typeof policy === 'function', 'Policy must be a function.');\n\n    return policy;\n  } catch (error) {\n    throw `Could not load policy ${file}: ${error.message}`;\n  }\n};\n"]}]}